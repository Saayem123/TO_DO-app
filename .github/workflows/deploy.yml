name: CI/CD with Terraform

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: ap-south-1

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }} 

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend-config="bucket=${TF_STATE_BUCKET_NAME}" -backend-config="region=${AWS_REGION}"
        working-directory: ./terraform

      - name: Terraform Plan
        id: Plan
        run: |
          terraform plan \
          -var="region=${AWS_REGION}" \
          -var="public_key=${PUBLIC_SSH_KEY}" \
          -var="private_key=${PRIVATE_SSH_KEY}" \
          -var="key_name=todo-terraform" \
          -out=PLAN
        working-directory: ./terraform

      - name: Terraform Apply
        id: Apply
        run: terraform apply PLAN
        working-directory: ./terraform

      - name: Set output
        id: set-ip
        run: |
          echo "instance_public_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT 

  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set IP env variable
        run: echo "SERVER_PUBLIC_IP=${{ needs.deploy-infrastructure.outputs.SERVER_PUBLIC_IP }}" >> $GITHUB_ENV # Comment: Updated to set SERVER_PUBLIC_IP in GITHUB_ENV

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR Repository
        id: create-repo
        run: |
          aws ecr describe-repositories --repository-names example-node-app --region $AWS_REGION || \
          aws ecr create-repository --repository-name example-node-app --region $AWS_REGION
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1

      - name: Build and push Docker image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./TODO

      - name: Deploy Docker image to EC2
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: example-node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: ap-south-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY, REGISTRY, REPOSITORY, IMAGE_TAG, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION, AWS_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login-password --region ap-south-1) | docker login --username AWS --password-stdin $REGISTRY # Comment: Updated AWS ECR login command
            sudo docker stop todoappcontainer || true
            sudo docker rm todoappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name todoappcontainer -p 5000:5000 $REGISTRY/$REPOSITORY:$IMAGE_TAG
